// Set a logo
// ---------------------------------------------------------------------------------------------------
private void SetLogo(Scene previousScene, Scene activeScene)
{
    if (activeScene.name == "mainMenu")
        StartCoroutine(WaitAndSetLogo());
}

private IEnumerator WaitAndSetLogo()
{
    while (true)
    {
        GameObject logoObject = FindObjectsOfType<GameObject>().FirstOrDefault(x => x.name == "GraffitiMiddleImage");
        if (logoObject != null)
        {
            Texture2D texture = ChaosMaterialHandler.GetMaterial(Properties.Resources.logo).mainTexture as Texture2D;
            logoObject.GetComponent<UnityEngine.UI.Image>().sprite = Sprite.Create(texture, new Rect(0, 0, texture.width, texture.height), new Vector2(0.5f, 0.5f));
            break;
        }

        yield return null;
    }
}
// ---------------------------------------------------------------------------------------------------


// Save a screenshot and show it
// ---------------------------------------------------------------------------------------------------
RenderTexture cameraTexture;

internal void CaptureScreenshot()
{
    // Set up RenderTexture:
    cameraTexture                   = new RenderTexture(Screen.width, Screen.height, 32, RenderTextureFormat.Default);
    cameraTexture.enableRandomWrite = true;
    cameraTexture.Create();

    // Capture current camera texture to restore later:
    var currentCameraTexture = Commons.CurrentCamera.targetTexture;

    // Replace camera target texture with the RenderTexture:
    Commons.CurrentCamera.targetTexture = cameraTexture;
    Commons.CurrentCamera.Render();

    // Read the RenderTexture and get the pixels of the display:
    RenderTexture.active = cameraTexture;
    Texture2D cameraOverlayTexture = new Texture2D(1920, 1080, TextureFormat.RGB24, false);
    cameraOverlayTexture.ReadPixels(new Rect(0f, 0f, (float)1920, (float)1080), 0, 0);
    cameraOverlayTexture.Apply();
    RenderTexture.active = null;

    // Restore the camera texture:
    Commons.CurrentCamera.targetTexture = currentCameraTexture;
    Commons.CurrentCamera.Render();

    // Release RenderTexture
    cameraTexture.Release();
}

internal void ShowCapturedScreenshot(Texture2D screenshot)
{
    // Get the canvas:
    Canvas canvas = Commons.UIManager?.GetValue<Canvas>("canvas");
    if (canvas == null)
        return;

    // Set up a GameObject for the texture to apply to:
    GameObject rawImageGO = new GameObject("CameraTextureDisplay");
    rawImageGO.transform.SetParent(canvas.transform);
    var rawImage = rawImageGO.AddComponent<RawImage>();

    // Adjust the anchor:
    RectTransform rect = rawImage.GetComponent<RectTransform>();
    rect.anchorMin = Vector2.zero;
    rect.anchorMax = Vector2.one;
    rect.offsetMin = Vector2.zero;
    rect.offsetMax = Vector2.zero;

    // Set the overlay:
    rawImage.texture = screenshot;
}
// ---------------------------------------------------------------------------------------------------